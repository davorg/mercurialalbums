#!/usr/bin/env perl
use strict;
use warnings;
use utf8;
use feature 'say';

use FindBin qw($Bin);
use lib "$Bin/../lib";

use Getopt::Long qw(GetOptions);
use File::Path qw(make_path);
use File::Spec;
use Text::Unidecode qw(unidecode);
use Template;
use Mercurial::Schema;

binmode STDOUT, ':encoding(UTF-8)';
binmode STDERR, ':encoding(UTF-8)';

my ($db, $out) = ('db/mercurial.db', 'docs');
GetOptions(
  'db=s'  => \$db,
  'out=s' => \$out,
) or die "Usage: $0 --db DB --out DIR\n";

my $schema = Mercurial::Schema->connect(
  "dbi:SQLite:dbname=$db", '', '',
  { sqlite_unicode => 1, on_connect_call => 'use_foreign_keys' }
);

my $tt = Template->new({
  INCLUDE_PATH => "$Bin/../tt_lib",
  ENCODING     => 'utf8',
  WRAPPER      => 'layout.tt',
}) or die Template->error;

sub write_page {
  my (%args) = @_;
  my $path = File::Spec->catfile($out, @{$args{path}});
  my (undef,$dir,undef) = File::Spec->splitpath($path);
  make_path($dir) unless -d $dir;
  open my $fh, '>:encoding(UTF-8)', $path or die "write $path: $!";
  $tt->process($args{template}, $args{vars}, $fh) or die $tt->error;
  close $fh;
# say "Wrote $path";
}

my %site = (
  title      => 'Mercurial Albums',
  base_url   => '/',
  nav => [
    { href => '/',        label => 'Home' },
    { href => '/year/',   label => 'Years' },
    { href => '/artist/', label => 'Artists' },
    { href => '/album/',  label => 'Albums' },
  ],
);

# Home
write_page(
  template => 'home.tt',
  vars     => { %site },
  path     => ['index.html'],
);

# Years
my @years = $schema->resultset('Year')->search({}, { order_by => { -desc => 'year' } })->all;
write_page(
  template => 'years_index.tt',
  vars     => { %site, years => \@years },
  path     => ['year','index.html'],
);
for my $yr (@years) {
  my @albums = $yr->albums->search(
    { 'me.year_id' => $yr->id },
    { prefetch => ['artist','year'], order_by => [ { -desc => 'me.is_winner' }, 'me.title' ] }
  )->all;
  write_page(
    template => 'year.tt',
    vars     => { %site, year => $yr, albums => \@albums },
    path     => ['year', $yr->slug, 'index.html'],
  );
}

# Artists
my @artists = $schema->resultset('Artist')->search({}, { order_by => 'sort_name' })->all;
write_page(
  template => 'artists_index.tt',
  vars     => { %site, artists => \@artists },
  path     => ['artist','index.html'],
);
for my $ar (@artists) {
  my @albums = $schema->resultset('Album')->search(
    { 'me.artist_id' => $ar->id },
    { prefetch => ['year'], order_by => ['year.year', 'me.title'] }
  )->all;
  write_page(
    template => 'artist.tt',
    vars     => { %site, artist => $ar->name, albums => \@albums },
    path     => ['artist', $ar->slug, 'index.html'],
  );
}

# Albums
my @albums_all = $schema->resultset('Album')->search(
  {}, { prefetch => ['artist','year'], order_by => ['me.title','artist.name'] }
)->all;
write_page(
  template => 'albums_index.tt',
  vars     => { %site, albums => \@albums_all },
  path     => ['album','index.html'],
);
say scalar @albums_all, ' albums found';
for my $al (@albums_all) {
  write_page(
    template => 'album.tt',
    vars     => { %site,
      title    => $al->title,
      is_winner=> $al->is_winner ? 1 : 0,
      artist   => $al->artist,
      year     => $al->year,
    },
    path     => ['album', $al->slug, 'index.html'],
  );
}

say "Output in '$out/'";
